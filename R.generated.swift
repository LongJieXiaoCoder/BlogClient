//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 13 colors.
  struct color {
    /// Color `black_444444`.
    static let black_444444 = Rswift.ColorResource(bundle: R.hostingBundle, name: "black_444444")
    /// Color `black_757575`.
    static let black_757575 = Rswift.ColorResource(bundle: R.hostingBundle, name: "black_757575")
    /// Color `black_ECECEC`.
    static let black_ECECEC = Rswift.ColorResource(bundle: R.hostingBundle, name: "black_ECECEC")
    /// Color `black_F6F6F6`.
    static let black_F6F6F6 = Rswift.ColorResource(bundle: R.hostingBundle, name: "black_F6F6F6")
    /// Color `blue_2E79BF`.
    static let blue_2E79BF = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue_2E79BF")
    /// Color `gray_F1F3F2`.
    static let gray_F1F3F2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray_F1F3F2")
    /// Color `green_3C9E81`.
    static let green_3C9E81 = Rswift.ColorResource(bundle: R.hostingBundle, name: "green_3C9E81")
    /// Color `green_F5FAF9`.
    static let green_F5FAF9 = Rswift.ColorResource(bundle: R.hostingBundle, name: "green_F5FAF9")
    /// Color `orange_D67D24`.
    static let orange_D67D24 = Rswift.ColorResource(bundle: R.hostingBundle, name: "orange_D67D24")
    /// Color `orange_FDF8F4`.
    static let orange_FDF8F4 = Rswift.ColorResource(bundle: R.hostingBundle, name: "orange_FDF8F4")
    /// Color `red_F1435A`.
    static let red_F1435A = Rswift.ColorResource(bundle: R.hostingBundle, name: "red_F1435A")
    /// Color `red_FEF6F7`.
    static let red_FEF6F7 = Rswift.ColorResource(bundle: R.hostingBundle, name: "red_FEF6F7")
    /// Color `white_FFFFFF`.
    static let white_FFFFFF = Rswift.ColorResource(bundle: R.hostingBundle, name: "white_FFFFFF")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "black_444444", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func black_444444(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.black_444444, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "black_757575", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func black_757575(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.black_757575, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "black_ECECEC", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func black_ECECEC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.black_ECECEC, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "black_F6F6F6", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func black_F6F6F6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.black_F6F6F6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue_2E79BF", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue_2E79BF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue_2E79BF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gray_F1F3F2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray_F1F3F2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray_F1F3F2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "green_3C9E81", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green_3C9E81(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green_3C9E81, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "green_F5FAF9", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green_F5FAF9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green_F5FAF9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "orange_D67D24", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orange_D67D24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orange_D67D24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "orange_FDF8F4", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orange_FDF8F4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orange_FDF8F4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "red_F1435A", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func red_F1435A(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.red_F1435A, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "red_FEF6F7", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func red_FEF6F7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.red_FEF6F7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "white_FFFFFF", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func white_FFFFFF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.white_FFFFFF, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "black_444444", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func black_444444(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.black_444444.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "black_757575", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func black_757575(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.black_757575.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "black_ECECEC", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func black_ECECEC(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.black_ECECEC.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "black_F6F6F6", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func black_F6F6F6(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.black_F6F6F6.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue_2E79BF", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue_2E79BF(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue_2E79BF.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "gray_F1F3F2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func gray_F1F3F2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.gray_F1F3F2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "green_3C9E81", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green_3C9E81(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green_3C9E81.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "green_F5FAF9", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green_F5FAF9(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green_F5FAF9.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "orange_D67D24", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func orange_D67D24(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.orange_D67D24.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "orange_FDF8F4", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func orange_FDF8F4(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.orange_FDF8F4.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "red_F1435A", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func red_F1435A(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.red_F1435A.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "red_FEF6F7", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func red_FEF6F7(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.red_FEF6F7.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "white_FFFFFF", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func white_FFFFFF(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.white_FFFFFF.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 7 files.
  struct file {
    /// Resource file `HKGrotesk-Bold.ttf`.
    static let hkGroteskBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HKGrotesk-Bold", pathExtension: "ttf")
    /// Resource file `HKGrotesk-Light.ttf`.
    static let hkGroteskLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HKGrotesk-Light", pathExtension: "ttf")
    /// Resource file `HKGrotesk-Medium.ttf`.
    static let hkGroteskMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HKGrotesk-Medium", pathExtension: "ttf")
    /// Resource file `HKGrotesk-Regular.ttf`.
    static let hkGroteskRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HKGrotesk-Regular", pathExtension: "ttf")
    /// Resource file `HKGrotesk-SemiBold.ttf`.
    static let hkGroteskSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HKGrotesk-SemiBold", pathExtension: "ttf")
    /// Resource file `Heiti-SC-Light.ttf`.
    static let heitiSCLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Heiti-SC-Light", pathExtension: "ttf")
    /// Resource file `Heiti-SC-Medium.ttf`.
    static let heitiSCMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Heiti-SC-Medium", pathExtension: "ttf")

    /// `bundle.url(forResource: "HKGrotesk-Bold", withExtension: "ttf")`
    static func hkGroteskBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hkGroteskBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "HKGrotesk-Light", withExtension: "ttf")`
    static func hkGroteskLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hkGroteskLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "HKGrotesk-Medium", withExtension: "ttf")`
    static func hkGroteskMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hkGroteskMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "HKGrotesk-Regular", withExtension: "ttf")`
    static func hkGroteskRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hkGroteskRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "HKGrotesk-SemiBold", withExtension: "ttf")`
    static func hkGroteskSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hkGroteskSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Heiti-SC-Light", withExtension: "ttf")`
    static func heitiSCLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.heitiSCLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Heiti-SC-Medium", withExtension: "ttf")`
    static func heitiSCMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.heitiSCMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 7 fonts.
  struct font: Rswift.Validatable {
    /// Font `HKGrotesk-Bold`.
    static let hkGroteskBold = Rswift.FontResource(fontName: "HKGrotesk-Bold")
    /// Font `HKGrotesk-Light`.
    static let hkGroteskLight = Rswift.FontResource(fontName: "HKGrotesk-Light")
    /// Font `HKGrotesk-Medium`.
    static let hkGroteskMedium = Rswift.FontResource(fontName: "HKGrotesk-Medium")
    /// Font `HKGrotesk-Regular`.
    static let hkGroteskRegular = Rswift.FontResource(fontName: "HKGrotesk-Regular")
    /// Font `HKGrotesk-SemiBold`.
    static let hkGroteskSemiBold = Rswift.FontResource(fontName: "HKGrotesk-SemiBold")
    /// Font `STHeitiSC-Light`.
    static let stHeitiSCLight = Rswift.FontResource(fontName: "STHeitiSC-Light")
    /// Font `STHeitiSC-Medium`.
    static let stHeitiSCMedium = Rswift.FontResource(fontName: "STHeitiSC-Medium")

    /// `UIFont(name: "HKGrotesk-Bold", size: ...)`
    static func hkGroteskBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: hkGroteskBold, size: size)
    }

    /// `UIFont(name: "HKGrotesk-Light", size: ...)`
    static func hkGroteskLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: hkGroteskLight, size: size)
    }

    /// `UIFont(name: "HKGrotesk-Medium", size: ...)`
    static func hkGroteskMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: hkGroteskMedium, size: size)
    }

    /// `UIFont(name: "HKGrotesk-Regular", size: ...)`
    static func hkGroteskRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: hkGroteskRegular, size: size)
    }

    /// `UIFont(name: "HKGrotesk-SemiBold", size: ...)`
    static func hkGroteskSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: hkGroteskSemiBold, size: size)
    }

    /// `UIFont(name: "STHeitiSC-Light", size: ...)`
    static func stHeitiSCLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: stHeitiSCLight, size: size)
    }

    /// `UIFont(name: "STHeitiSC-Medium", size: ...)`
    static func stHeitiSCMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: stHeitiSCMedium, size: size)
    }

    static func validate() throws {
      if R.font.hkGroteskBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HKGrotesk-Bold' could not be loaded, is 'HKGrotesk-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.hkGroteskLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HKGrotesk-Light' could not be loaded, is 'HKGrotesk-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.hkGroteskMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HKGrotesk-Medium' could not be loaded, is 'HKGrotesk-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.hkGroteskRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HKGrotesk-Regular' could not be loaded, is 'HKGrotesk-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.hkGroteskSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HKGrotesk-SemiBold' could not be loaded, is 'HKGrotesk-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.stHeitiSCLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'STHeitiSC-Light' could not be loaded, is 'Heiti-SC-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.stHeitiSCMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'STHeitiSC-Medium' could not be loaded, is 'Heiti-SC-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 28 images.
  struct image {
    /// Image `accountAbout`.
    static let accountAbout = Rswift.ImageResource(bundle: R.hostingBundle, name: "accountAbout")
    /// Image `accountAvatar`.
    static let accountAvatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "accountAvatar")
    /// Image `accountBackgroundImage`.
    static let accountBackgroundImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "accountBackgroundImage")
    /// Image `accountBlog`.
    static let accountBlog = Rswift.ImageResource(bundle: R.hostingBundle, name: "accountBlog")
    /// Image `accountEssay`.
    static let accountEssay = Rswift.ImageResource(bundle: R.hostingBundle, name: "accountEssay")
    /// Image `accountFave`.
    static let accountFave = Rswift.ImageResource(bundle: R.hostingBundle, name: "accountFave")
    /// Image `accountFeedback`.
    static let accountFeedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "accountFeedback")
    /// Image `accountSetting`.
    static let accountSetting = Rswift.ImageResource(bundle: R.hostingBundle, name: "accountSetting")
    /// Image `appLogo`.
    static let appLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "appLogo")
    /// Image `comment`.
    static let comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment")
    /// Image `fave`.
    static let fave = Rswift.ImageResource(bundle: R.hostingBundle, name: "fave")
    /// Image `home_logo`.
    static let home_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_logo")
    /// Image `lanugchImage`.
    static let lanugchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "lanugchImage")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `more`.
    static let more = Rswift.ImageResource(bundle: R.hostingBundle, name: "more")
    /// Image `rightArrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "rightArrow")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `tabBarItem_blog_selected`.
    static let tabBarItem_blog_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarItem_blog_selected")
    /// Image `tabBarItem_blog`.
    static let tabBarItem_blog = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarItem_blog")
    /// Image `tabBarItem_flash_selected`.
    static let tabBarItem_flash_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarItem_flash_selected")
    /// Image `tabBarItem_flash`.
    static let tabBarItem_flash = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarItem_flash")
    /// Image `tabBarItem_liberary_selected`.
    static let tabBarItem_liberary_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarItem_liberary_selected")
    /// Image `tabBarItem_liberary`.
    static let tabBarItem_liberary = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarItem_liberary")
    /// Image `tabBarItem_me_selected`.
    static let tabBarItem_me_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarItem_me_selected")
    /// Image `tabBarItem_me`.
    static let tabBarItem_me = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarItem_me")
    /// Image `tabBarItem_news_selected`.
    static let tabBarItem_news_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarItem_news_selected")
    /// Image `tabBarItem_news`.
    static let tabBarItem_news = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarItem_news")
    /// Image `views`.
    static let views = Rswift.ImageResource(bundle: R.hostingBundle, name: "views")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "accountAbout", bundle: ..., traitCollection: ...)`
    static func accountAbout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accountAbout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "accountAvatar", bundle: ..., traitCollection: ...)`
    static func accountAvatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accountAvatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "accountBackgroundImage", bundle: ..., traitCollection: ...)`
    static func accountBackgroundImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accountBackgroundImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "accountBlog", bundle: ..., traitCollection: ...)`
    static func accountBlog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accountBlog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "accountEssay", bundle: ..., traitCollection: ...)`
    static func accountEssay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accountEssay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "accountFave", bundle: ..., traitCollection: ...)`
    static func accountFave(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accountFave, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "accountFeedback", bundle: ..., traitCollection: ...)`
    static func accountFeedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accountFeedback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "accountSetting", bundle: ..., traitCollection: ...)`
    static func accountSetting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accountSetting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "appLogo", bundle: ..., traitCollection: ...)`
    static func appLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "comment", bundle: ..., traitCollection: ...)`
    static func comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fave", bundle: ..., traitCollection: ...)`
    static func fave(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fave, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_logo", bundle: ..., traitCollection: ...)`
    static func home_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lanugchImage", bundle: ..., traitCollection: ...)`
    static func lanugchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lanugchImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "more", bundle: ..., traitCollection: ...)`
    static func more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rightArrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarItem_blog", bundle: ..., traitCollection: ...)`
    static func tabBarItem_blog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarItem_blog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarItem_blog_selected", bundle: ..., traitCollection: ...)`
    static func tabBarItem_blog_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarItem_blog_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarItem_flash", bundle: ..., traitCollection: ...)`
    static func tabBarItem_flash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarItem_flash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarItem_flash_selected", bundle: ..., traitCollection: ...)`
    static func tabBarItem_flash_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarItem_flash_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarItem_liberary", bundle: ..., traitCollection: ...)`
    static func tabBarItem_liberary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarItem_liberary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarItem_liberary_selected", bundle: ..., traitCollection: ...)`
    static func tabBarItem_liberary_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarItem_liberary_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarItem_me", bundle: ..., traitCollection: ...)`
    static func tabBarItem_me(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarItem_me, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarItem_me_selected", bundle: ..., traitCollection: ...)`
    static func tabBarItem_me_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarItem_me_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarItem_news", bundle: ..., traitCollection: ...)`
    static func tabBarItem_news(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarItem_news, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarItem_news_selected", bundle: ..., traitCollection: ...)`
    static func tabBarItem_news_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarItem_news_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "views", bundle: ..., traitCollection: ...)`
    static func views(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.views, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `MeTableHeadView`.
    static let meTableHeadView = _R.nib._MeTableHeadView()
    /// Nib `MeTableViewCell`.
    static let meTableViewCell = _R.nib._MeTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MeTableHeadView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.meTableHeadView) instead")
    static func meTableHeadView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.meTableHeadView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MeTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.meTableViewCell) instead")
    static func meTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.meTableViewCell)
    }
    #endif

    static func meTableHeadView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.meTableHeadView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func meTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MeTableViewCell? {
      return R.nib.meTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MeTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `MeTableViewCell`.
    static let meTableViewCell: Rswift.ReuseIdentifier<MeTableViewCell> = Rswift.ReuseIdentifier(identifier: "MeTableViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 4 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 1 localization keys.
    struct infoPlist {
      /// en translation: iCnBlog
      ///
      /// Locales: zh-Hans, en
      static let cfBundleDisplayName = Rswift.StringResource(key: "CFBundleDisplayName", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)

      /// en translation: iCnBlog
      ///
      /// Locales: zh-Hans, en
      static func cfBundleDisplayName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "CFBundleDisplayName"
        }

        return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 19 localization keys.
    struct localizable {
      /// en translation: %i hours ago
      ///
      /// Locales: zh-Hans, en
      static let hoursBefore = Rswift.StringResource(key: "hoursBefore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: %i minutes ago
      ///
      /// Locales: zh-Hans, en
      static let minuteBefore = Rswift.StringResource(key: "minuteBefore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: %i seconds ago
      ///
      /// Locales: zh-Hans, en
      static let secondBefore = Rswift.StringResource(key: "secondBefore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: About
      ///
      /// Locales: zh-Hans, en
      static let about = Rswift.StringResource(key: "about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Blog
      ///
      /// Locales: zh-Hans, en
      static let blog = Rswift.StringResource(key: "blog", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Essay
      ///
      /// Locales: zh-Hans, en
      static let essay = Rswift.StringResource(key: "essay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Fave
      ///
      /// Locales: zh-Hans, en
      static let fave = Rswift.StringResource(key: "fave", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Feedback
      ///
      /// Locales: zh-Hans, en
      static let feedback = Rswift.StringResource(key: "feedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Flash
      ///
      /// Locales: zh-Hans, en
      static let flash = Rswift.StringResource(key: "flash", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Just now
      ///
      /// Locales: zh-Hans, en
      static let justNow = Rswift.StringResource(key: "justNow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Library
      ///
      /// Locales: zh-Hans, en
      static let library = Rswift.StringResource(key: "library", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: zh-Hans, en
      static let logout = Rswift.StringResource(key: "logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Me
      ///
      /// Locales: zh-Hans, en
      static let me = Rswift.StringResource(key: "me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: My blogs
      ///
      /// Locales: zh-Hans, en
      static let myBlogs = Rswift.StringResource(key: "my blogs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: News
      ///
      /// Locales: zh-Hans, en
      static let news = Rswift.StringResource(key: "news", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Setting
      ///
      /// Locales: zh-Hans, en
      static let setting = Rswift.StringResource(key: "setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Yesterday %@
      ///
      /// Locales: zh-Hans, en
      static let yesterdayTime = Rswift.StringResource(key: "yesterdayTime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: 精选
      ///
      /// Locales: zh-Hans, en
      static let essence = Rswift.StringResource(key: "essence", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: 首页
      ///
      /// Locales: zh-Hans, en
      static let home = Rswift.StringResource(key: "home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)

      /// en translation: %i hours ago
      ///
      /// Locales: zh-Hans, en
      static func hoursBefore(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("hoursBefore", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hoursBefore"
        }

        let format = NSLocalizedString("hoursBefore", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %i minutes ago
      ///
      /// Locales: zh-Hans, en
      static func minuteBefore(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("minuteBefore", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "minuteBefore"
        }

        let format = NSLocalizedString("minuteBefore", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %i seconds ago
      ///
      /// Locales: zh-Hans, en
      static func secondBefore(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("secondBefore", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "secondBefore"
        }

        let format = NSLocalizedString("secondBefore", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: About
      ///
      /// Locales: zh-Hans, en
      static func about(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("about", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "about"
        }

        return NSLocalizedString("about", bundle: bundle, comment: "")
      }

      /// en translation: Blog
      ///
      /// Locales: zh-Hans, en
      static func blog(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blog"
        }

        return NSLocalizedString("blog", bundle: bundle, comment: "")
      }

      /// en translation: Essay
      ///
      /// Locales: zh-Hans, en
      static func essay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("essay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "essay"
        }

        return NSLocalizedString("essay", bundle: bundle, comment: "")
      }

      /// en translation: Fave
      ///
      /// Locales: zh-Hans, en
      static func fave(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fave", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fave"
        }

        return NSLocalizedString("fave", bundle: bundle, comment: "")
      }

      /// en translation: Feedback
      ///
      /// Locales: zh-Hans, en
      static func feedback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("feedback", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "feedback"
        }

        return NSLocalizedString("feedback", bundle: bundle, comment: "")
      }

      /// en translation: Flash
      ///
      /// Locales: zh-Hans, en
      static func flash(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("flash", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "flash"
        }

        return NSLocalizedString("flash", bundle: bundle, comment: "")
      }

      /// en translation: Just now
      ///
      /// Locales: zh-Hans, en
      static func justNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("justNow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "justNow"
        }

        return NSLocalizedString("justNow", bundle: bundle, comment: "")
      }

      /// en translation: Library
      ///
      /// Locales: zh-Hans, en
      static func library(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("library", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "library"
        }

        return NSLocalizedString("library", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: zh-Hans, en
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logout"
        }

        return NSLocalizedString("logout", bundle: bundle, comment: "")
      }

      /// en translation: Me
      ///
      /// Locales: zh-Hans, en
      static func me(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("me", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "me"
        }

        return NSLocalizedString("me", bundle: bundle, comment: "")
      }

      /// en translation: My blogs
      ///
      /// Locales: zh-Hans, en
      static func myBlogs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("my blogs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "my blogs"
        }

        return NSLocalizedString("my blogs", bundle: bundle, comment: "")
      }

      /// en translation: News
      ///
      /// Locales: zh-Hans, en
      static func news(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("news", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "news"
        }

        return NSLocalizedString("news", bundle: bundle, comment: "")
      }

      /// en translation: Setting
      ///
      /// Locales: zh-Hans, en
      static func setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("setting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "setting"
        }

        return NSLocalizedString("setting", bundle: bundle, comment: "")
      }

      /// en translation: Yesterday %@
      ///
      /// Locales: zh-Hans, en
      static func yesterdayTime(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("yesterdayTime", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "yesterdayTime"
        }

        let format = NSLocalizedString("yesterdayTime", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: 精选
      ///
      /// Locales: zh-Hans, en
      static func essence(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("essence", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "essence"
        }

        return NSLocalizedString("essence", bundle: bundle, comment: "")
      }

      /// en translation: 首页
      ///
      /// Locales: zh-Hans, en
      static func home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home"
        }

        return NSLocalizedString("home", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 0 localization keys.
    struct main {
      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _MeTableHeadView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MeTableHeadView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MeTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MeTableViewCell

      let bundle = R.hostingBundle
      let identifier = "MeTableViewCell"
      let name = "MeTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MeTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "lanugchImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lanugchImage' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabBarViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
